name: Create Table in Snowflake

on:
  workflow_dispatch:
   inputs:
      sql_file:
        description: "Path to the SQL file to execute"
        required: true
        default: "sql/create_temp_success_txn.sql"
  push:
    branches: ["main"]
    paths:
      - "sql/create_temp_success_txn.sql"

jobs:
  run-sql:
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: SYSADMIN
      SNOWFLAKE_WAREHOUSE: COMPUTE_WH
      SNOWFLAKE_DATABASE: BANK_DB
      SNOWFLAKE_SCHEMA: PUBLIC

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python & Install Snowflake Connector
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Run SQL script in Snowflake
        run: |
          source venv/bin/activate
          python3 - <<'EOF'
          import os
          import sys
          import snowflake.connector

          # Connect to Snowflake
          try:
              conn = snowflake.connector.connect(
                  user=os.getenv("SNOWFLAKE_USER").strip(),
                  password=os.getenv("SNOWFLAKE_PASSWORD").strip(),
                  account=os.getenv("SNOWFLAKE_ACCOUNT").strip(),
                  warehouse=os.getenv("SNOWFLAKE_WAREHOUSE").strip(),
                  database=os.getenv("SNOWFLAKE_DATABASE").strip(),
                  schema=os.getenv("SNOWFLAKE_SCHEMA").strip(),
                  role=os.getenv("SNOWFLAKE_ROLE").strip()
              )
              print("✅ Connected to Snowflake successfully!")
          except Exception as e:
              print(f"❌ Failed to connect to Snowflake: {e}")
              sys.exit(1)

          # Read SQL file and split statements safely
          try:
              with open("sql/create_temp_failed_txn.sql", "r") as f:
                  sql_script = f.read()
              # Remove comments and empty lines
              lines = [line for line in sql_script.splitlines() if line.strip() and not line.strip().startswith("--")]
              cleaned_sql = "\n".join(lines)
              # Split by semicolon safely
              statements = [stmt.strip() for stmt in cleaned_sql.split(';') if stmt.strip()]
              if not statements:
                  print("❌ SQL script is empty after cleaning. Please check your file.")
                  sys.exit(1)
          except Exception as e:
              print(f"❌ Failed to read or clean SQL file: {e}")
              sys.exit(1)

          # Execute each SQL statement and commit
          try:
              cs = conn.cursor()
              for stmt in statements:
                  cs.execute(stmt)
                  conn.commit()  # Ensure permanent table is committed
                  print(f"✅ Executed statement:\n{stmt[:80]}{'...' if len(stmt) > 80 else ''}")
          except Exception as e:
              print(f"❌ Failed to execute SQL statement: {e}")
              sys.exit(1)
          #finally:
              #cs.close()
              #conn.close()
          EOF
        shell: /usr/bin/bash -e {0}
