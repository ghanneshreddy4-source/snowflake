name: Create Temp Table in Snowflake

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - "sql/create_temp_failed_txn.sql"

jobs:
  run-sql:
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_ROLE: SYSADMIN
      SNOWFLAKE_WAREHOUSE: COMPUTE_WH
      SNOWFLAKE_DATABASE: PC_DBT_DB
      SNOWFLAKE_SCHEMA: DBT_GRED

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Python and Snowflake Connector
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install snowflake-connector-python

      - name: Sanitize Secrets
        run: |
          export SNOWFLAKE_ACCOUNT="${SNOWFLAKE_ACCOUNT//[$'\n\r']}"
          export SNOWFLAKE_USER="${SNOWFLAKE_USER//[$'\n\r']}"
          export SNOWFLAKE_PASSWORD="${SNOWFLAKE_PASSWORD//[$'\n\r']}"

      - name: Run SQL in Snowflake
        run: |
          source venv/bin/activate
          python3 - <<'EOF'
          import os
          import snowflake.connector
          import sys

          try:
              conn = snowflake.connector.connect(
                  user=os.getenv("SNOWFLAKE_USER").strip(),
                  password=os.getenv("SNOWFLAKE_PASSWORD").strip(),
                  account=os.getenv("SNOWFLAKE_ACCOUNT").strip(),
                  warehouse=os.getenv("SNOWFLAKE_WAREHOUSE").strip(),
                  database=os.getenv("SNOWFLAKE_DATABASE").strip(),
                  schema=os.getenv("SNOWFLAKE_SCHEMA").strip(),
                  role=os.getenv("SNOWFLAKE_ROLE").strip()
              )
              print("✅ Connected to Snowflake successfully!")
          except Exception as e:
              print(f"❌ Failed to connect to Snowflake: {e}")
              sys.exit(1)

          try:
              with open("sql/create_temp_failed_txn.sql", "r") as f:
                  sql_script = f.read()
              cs = conn.cursor()
              # Execute multiple statements
              cs.execute_string(sql_script, split_statements=True, return_cursors=False)
              print("✅ SQL script executed successfully!")

              # Optional validation: print number of failed transactions
              cs.execute("SELECT COUNT(*) AS failed_txn_count FROM TEMP_FAILED_TRANSACTIONS")
              result = cs.fetchone()
              print(f"ℹ️ Failed transactions inserted: {result[0]}")
          except Exception as e:
              print(f"❌ Failed to execute SQL script: {e}")
              sys.exit(1)
          finally:
              cs.close()
              conn.close()
          EOF
